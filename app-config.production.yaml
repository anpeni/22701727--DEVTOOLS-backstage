app:
  title: Neoris monitor
  baseUrl: https://backstage.aws.neoris.cloud:3000

organization:
  name: Neoris

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: https://backstage.aws.neoris.cloud:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: ["'self'", 'data:', 'https://backstage.io']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: https://backstage.aws.neoris.cloud:7007
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
    plugin:
      auth:
        connection:
          database: backstage_plugin_auth
      catalog:
        connection:
          database: backstage_plugin_catalog
      scaffolder:
        connection:
          database: backstage_plugin_scaffolder
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  

integrations:
  bitbucketCloud:
    - username: ${BITBUCKET_CLOUD_USERNAME}
      appPassword: ${BITBUCKET_CLOUD_APP_PASSWORD}

proxy:
  '/grafana/api':
    # May be a public or an internal DNS
    target: ${URL_GRAFANA}
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN_ACCESS}
  '/prometheus/api':
    # url to the api and path of your hosted prometheus instance
    target: ${URL_PROMETHEUS}
    secure: false
    #changeOrigin: true
    #secure: true
    #headers:
    #  Authorization: $YOUR_AUTH_TOKEN_IF_PROMETHEUS_IS_SECURED
  '/bitbucketci':
    # May be a public or an internal DNS
    target: https://api.bitbucket.org/2.0/
    headers:
      # Basic base64(${BITBUCKET_CLOUD_USERNAME}:${BITBUCKET_CLOUD_APP_PASSWORD})
      Authorization: Basic ${BITBUCKETCI_TOKEN_ACCESS}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'external' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: file
      target: ../../catalog-neoris/catalog-info.yaml

grafana:
  # Publicly accessible domain
  domain: https://grafana.aws.neoris.cloud/

  # Is unified alerting enabled in Grafana?
  # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
  # Optional. Default: false
  unifiedAlerting: false

# Defaults to /prometheus/api and can be omitted if proxy is configured for that url
prometheus:
  proxyPath: /prometheus/api

sonarqube:
  baseUrl: https://sonarcloud.io
  apiKey: ${SONARQUBE_APIKEY}

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: ${AWS_K8S_URL}
          name: devsecops
          authProvider: 'aws'
          caData: ${AWS_K8S_CADATA}
